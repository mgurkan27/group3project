# --------------------------------------------------------------------------
# Creating Origin Access Identity for CloudFront 
# --------------------------------------------------------------------------
resource "aws_cloudfront_origin_access_identity" "origin_access_identity" {
  comment = "Some comment"
}
resource "aws_cloudfront_distribution" "s3_distribution_task" {
  origin {
    domain_name = module.group3-s3-utility-bucket-test.bucket_domain_name
    origin_id   = module.group3-s3-utility-bucket-test.bucket_id 
    s3_origin_config {
      # origin_access_identity = "origin-access-identity/cloudfront/ABCDEFG1234567"
      origin_access_identity = aws_cloudfront_origin_access_identity.origin_access_identity.cloudfront_access_identity_path
    }
  }
  enabled         = true
  is_ipv6_enabled = true
  comment         = "group3 web ditribution"
  default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = module.group3-s3-utility-bucket-test.bucket_id 
    forwarded_values {
      query_string = false
      cookies {
        forward = "none"
      }
    }
    viewer_protocol_policy = "allow-all"
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
  }
  # Cache behavior with precedence 0
  ordered_cache_behavior {
    path_pattern     = "/content/immutable/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD", "OPTIONS"]
    target_origin_id = module.group3-s3-utility-bucket-test.bucket_id 
    forwarded_values {
      query_string = false
      headers      = ["Origin"]
      cookies {
        forward = "none"
      }
    }
    min_ttl                = 0
    default_ttl            = 86400
    max_ttl                = 3156000
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }
  price_class = "PriceClass_200"
  restrictions {
    geo_restriction {
      restriction_type = "blacklist"
      locations        = ["CA"]
    }
  }
  tags = {
    Environment = "test"
  }
  viewer_certificate {
    cloudfront_default_certificate = true
  }
  retain_on_delete = true
}
# ---------------------------------------------------------------------------------
# Create AWS Bucket Policy for CloudFront
# ---------------------------------------------------------------------------------
data "aws_iam_policy_document" "s3_policy" {
  statement {
    actions   = ["s3:GetObject"]
    resources = ["${module.group3-s3-utility-bucket-test.bucket_arn}/*"]
    principals {
      type        = "AWS"
      identifiers = ["${aws_cloudfront_origin_access_identity.origin_access_identity.iam_arn}"]
    }
  }
}
resource "aws_s3_bucket_policy" "s3BucketPolicy" {
  bucket = aws_s3_bucket.group3-s3-utility-bucket-test.bucket_id 
  policy = data.aws_iam_policy_document.s3_policy.json
}